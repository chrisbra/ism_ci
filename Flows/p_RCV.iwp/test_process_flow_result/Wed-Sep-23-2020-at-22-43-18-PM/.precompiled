<?xml version="1.0" encoding="ASCII"?>
<model:iway xmlns:model="http://www.iwaysoftware.com/designer/model">
  <model:server name="iWay Registry">
    <model:processflow description="" iwayversion="8.0.3" name="p_RCV">
      <model:objects>
        <model:object class="start" deactivate="false" defer="false" etap="false" id="start" key="1" name="Start" type="FLOWCHART_STARTUP_START" useglobalobj="false" xdebughigh="1" xdebuglow="1">
          <model:user>
            <model:properties>
              <model:group name="General">
                <model:propertyitem display="No" itemtype="boolean" label="Debug" name="Debug" required="false" value="true" valuetype="boolean"/>
                <model:propertyitem name="roottag" value=""/>
              </model:group>
            </model:properties>
          </model:user>
          <model:runtimevariables/>
        </model:object>
        <model:object class="end" deactivate="false" defer="false" etap="false" id="end" key="2" name="End" type="FLOWCHART_STARTUP_END" useglobalobj="false" xdebughigh="10" xdebuglow="1">
          <model:user>
            <model:properties>
              <model:group name="General">
                <model:propertyitem name="roottag" value=""/>
                <model:propertyitem name="terminate" value="false"/>
                <model:propertyitem name="ctype" value=""/>
              </model:group>
            </model:properties>
          </model:user>
        </model:object>
        <model:object class="agent" classname="com.ibi.agents.XDInternalEmitAgent" deactivate="false" defer="false" etap="false" id="queueout" key="3" name="Queue IN" type="FLOWCHART_STARTUP_OUTQUEUE" useglobalobj="false" xdebughigh="10" xdebuglow="1">
          <model:user>
            <model:properties>
              <model:group name="Queue Settings">
                <model:propertyitem description="If set, the emit respects the transactionality of the channel.  If not set, the emit is always done." name="trans" required="false" value="true"/>
                <model:propertyitem description="How many seconds to wait for synchronous response.  Set to 0 or leave blank to wait indefinitely." name="timeout" required="false" value="0"/>
              </model:group>
              <model:group name="Post Action">
                <model:propertyitem description="Return from this object." name="returnresponse" required="true" value="status"/>
              </model:group>
              <model:group name="hidden">
                <model:propertyitem description="{&quot;name&quot;:&quot;Configuration (queue_in)&quot;,&quot;propertyGroups&quot;:[{&quot;name&quot;:&quot;Queue Settings&quot;,&quot;properties&quot;:[{&quot;name&quot;:&quot;Name&quot;,&quot;value&quot;:&quot;IN&quot;,&quot;description&quot;:&quot;Name of the internal queue to post messages to&quot;},{&quot;name&quot;:&quot;Priority&quot;,&quot;value&quot;:&quot;4&quot;,&quot;description&quot;:&quot;The priority is an integer between 0 and 9 inclusive. The lowest priority is 0. The highest most expedited priority is 9.&quot;},{&quot;name&quot;:&quot;Put Timeout&quot;,&quot;value&quot;:&quot;3000&quot;,&quot;description&quot;:&quot;Time, in milliseconds, to wait for queue to become available when attempting to put a message on the queue.  You can enter 0 for an unlimited wait, but this is not recommended.  If no value is supplied, timeout will be set to 3000 milliseconds.&quot;}]},{&quot;name&quot;:&quot;Registers (Sent)&quot;,&quot;properties&quot;:[{&quot;name&quot;:&quot;Apply&quot;,&quot;value&quot;:&quot;true&quot;,&quot;description&quot;:&quot;User registers are processing variables and their values. If you want these registers to be emitted with the message set this to true.  In resubmit operations, usually this is set to false.&quot;},{&quot;name&quot;:&quot;Namespace&quot;,&quot;value&quot;:&quot;*&quot;,&quot;description&quot;:&quot;List of register namespaces that will be made available to the ordered queue.&quot;}]}]}" name="queueoutconfig" value="queue_in"/>
                <model:propertyitem description="Id of the className" name="classNameId"/>
                <model:propertyitem name="priority" value="4"/>
                <model:propertyitem name="puttimeout" value="3000"/>
                <model:propertyitem name="wantuser" value="true"/>
                <model:propertyitem name="replytoreqns" value="*"/>
                <model:propertyitem name="queue" value="IN"/>
              </model:group>
              <model:registers name="Pre-Execution">
                <model:propertyitem active="true" hidden="true" name="dbg.3.ex.st.time" scope="message" usage="user" value="_timer(nanoseconds)"/>
              </model:registers>
              <model:registers name="Post-Execution">
                <model:propertyitem active="true" hidden="true" name="dbg.3.ex.time" scope="message" usage="user" value="_isub(_timer(nanoseconds),_sreg(dbg.3.ex.st.time))"/>
              </model:registers>
            </model:properties>
          </model:user>
        </model:object>
        <model:object class="agent" classname="com.ibi.agents.XDSREGAgent" deactivate="false" defer="false" etap="false" id="variables" key="4" name="Variables" type="FLOWCHART_VARIABLES" useglobalobj="false" xdebughigh="10" xdebuglow="1">
          <model:user>
            <model:properties>
              <model:group name="Settings">
                <model:propertyitem description="Type: (headers appear in emitted documents as header values). Use type del to delete the register." name="regtype" required="false" value="doc"/>
                <model:propertyitem name="scope" value="global"/>
                <model:propertyitem description="Determines the data type of the value stored in the register. The best choice is String even for integral values, except for special situations like JMS properties." name="datatype" required="false" value="String"/>
              </model:group>
              <model:group name="Advanced">
                <model:propertyitem description="Causes contents to hold functions that are evaluated on access" name="eval" required="false" value="false"/>
                <model:propertyitem description="If set, these variable(s) will not be logged in an activity log (some drivers may not respect this setting)." name="nolog" required="false" value="false"/>
              </model:group>
              <model:group name="hidden">
                <model:propertyitem description="Id of the className" name="classNameId" value="2"/>
              </model:group>
              <model:group name="User Defined">
                <model:propertyitem description="" name="user_target" value="Dynamics"/>
                <model:propertyitem description="" name="user_source" value="LOGA"/>
                <model:propertyitem description="" name="user_file_in" value="_sreg(basename)"/>
                <model:propertyitem description="" name="user_mandant" value="_substr(_sreg(parent), 38)"/>
              </model:group>
              <model:registers name="Pre-Execution">
                <model:propertyitem active="true" hidden="true" name="dbg.4.ex.st.time" scope="message" usage="user" value="_timer(nanoseconds)"/>
              </model:registers>
              <model:registers name="Post-Execution">
                <model:propertyitem active="true" hidden="true" name="dbg.4.ex.time" scope="message" usage="user" value="_isub(_timer(nanoseconds),_sreg(dbg.4.ex.st.time))"/>
              </model:registers>
            </model:properties>
          </model:user>
        </model:object>
        <model:object class="catch" classname="com.ibi.agents.XDCatchAgent" deactivate="false" defer="false" etap="false" id="catch" key="5" name="Catch" type="FLOWCHART_CATCH" useglobalobj="false" xdebughigh="10" xdebuglow="1">
          <model:user>
            <model:properties>
              <model:group name="Settings">
                <model:propertyitem description="Maximum number of times a CATCH will be effected per 'forward' entry." name="maxerr" required="false" value="1"/>
              </model:group>
              <model:registers name="Pre-Execution">
                <model:propertyitem active="true" hidden="true" name="dbg.5.ex.st.time" scope="message" usage="user" value="_timer(nanoseconds)"/>
              </model:registers>
              <model:registers name="Post-Execution">
                <model:propertyitem active="true" hidden="true" name="dbg.5.ex.time" scope="message" usage="user" value="_isub(_timer(nanoseconds),_sreg(dbg.5.ex.st.time))"/>
              </model:registers>
            </model:properties>
          </model:user>
        </model:object>
        <model:object class="end" classname="" deactivate="false" defer="false" etap="false" id="end" key="7" name="End Error" type="FLOWCHART_STARTUP_END" useglobalobj="false" xdebughigh="10" xdebuglow="1">
          <model:user>
            <model:properties>
              <model:group name="General">
                <model:propertyitem name="terminate" value="true"/>
                <model:propertyitem name="ctype"/>
              </model:group>
            </model:properties>
          </model:user>
        </model:object>
        <model:object class="agent" classname="com.ibi.agents.XDTransformAgent" id="transform" key="9" name="EXCEL to XML" type="FLOWCHART_TRANSFORM">
          <model:user>
            <model:customevent/>
            <model:properties>
              <model:group name="Transform">
                <model:propertyitem description="Type of transformation" itemtype="string" name="engine" value="iway"/>
                <model:propertyitem description="Defined transform name to execute" itemtype="string" name="transform" value="EXCEL_to_XML"/>
                <model:propertyitem name="intype" value="all"/>
                <model:propertyitem description="Should data be trimmed before transforming?" name="shouldTrimParm" required="false" value="false"/>
                <model:propertyitem name="parmns" value=""/>
              </model:group>
              <model:group name="hidden">
                <model:propertyitem name="classNameId" value="0"/>
              </model:group>
              <model:group name="Output Handling">
                <model:propertyitem description="Parse the transform output as XML, JSON or Unspecified." name="outtype" required="false" value="xml"/>
              </model:group>
              <model:group name="Error Handling">
                <model:propertyitem description="Whether output document emitted should be the original input document (original) or a status document (status)" name="stat" required="false" value="status"/>
              </model:group>
              <model:registers name="Pre-Execution">
                <model:propertyitem active="true" hidden="true" name="dbg.9.ex.st.time" scope="message" usage="user" value="_timer(nanoseconds)"/>
              </model:registers>
              <model:registers name="Post-Execution">
                <model:propertyitem active="true" hidden="true" name="dbg.9.ex.time" scope="message" usage="user" value="_isub(_timer(nanoseconds),_sreg(dbg.9.ex.st.time))"/>
              </model:registers>
            </model:properties>
          </model:user>
        </model:object>
        <model:object class="agent" classname="com.ibi.agents.XDFailAgent" deactivate="false" defer="false" etap="false" id="throw" key="10" name="Fail" type="FLOWCHART_THROW" useglobalobj="false" xdebughigh="10" xdebuglow="1">
          <model:user>
            <model:properties>
              <model:group name="Processing">
                <model:propertyitem name="type" value="fail"/>
                <model:propertyitem description="The exception message associated with this exception." name="message" required="false"/>
                <model:propertyitem description="When true, immediately ends this flow with an uncatchable error, bypassing error processing." name="nocatch" required="false" value="true"/>
              </model:group>
              <model:group name="Logging">
                <model:propertyitem description="Do not trace this exception.  This is useful for cases in which the trace log is being monitored by an external program for errors." name="nomsg" required="false" value="false"/>
                <model:propertyitem description="When set, a transaction log entry (XALOG) is written with its message.  This causes a message to appear in the transaction log analysis." name="xamsg" required="false" value="false"/>
              </model:group>
              <model:registers name="Pre-Execution">
                <model:propertyitem active="true" hidden="true" name="dbg.10.ex.st.time" scope="message" usage="user" value="_timer(nanoseconds)"/>
              </model:registers>
              <model:registers name="Post-Execution">
                <model:propertyitem active="true" hidden="true" name="dbg.10.ex.time" scope="message" usage="user" value="_isub(_timer(nanoseconds),_sreg(dbg.10.ex.st.time))"/>
              </model:registers>
            </model:properties>
          </model:user>
        </model:object>
        <model:object class="agent" classname="com.ibi.agents.XDInternalEmitAgent" deactivate="false" defer="false" etap="false" id="queueout" key="11" name="Queue ERROR" type="FLOWCHART_STARTUP_OUTQUEUE" useglobalobj="false" xdebughigh="10" xdebuglow="1">
          <model:user>
            <model:properties>
              <model:group name="Queue Settings">
                <model:propertyitem description="If set, the emit respects the transactionality of the channel.  If not set, the emit is always done." name="trans" required="false" value="true"/>
                <model:propertyitem description="How many seconds to wait for synchronous response.  Set to 0 or leave blank to wait indefinitely." name="timeout" required="false" value="0"/>
              </model:group>
              <model:group name="Post Action">
                <model:propertyitem description="Return from this object." name="returnresponse" required="true" value="status"/>
              </model:group>
              <model:group name="hidden">
                <model:propertyitem description="{&quot;name&quot;:&quot;Configuration (queue_error)&quot;,&quot;propertyGroups&quot;:[{&quot;name&quot;:&quot;Queue Settings&quot;,&quot;properties&quot;:[{&quot;name&quot;:&quot;Name&quot;,&quot;value&quot;:&quot;ERROR&quot;,&quot;description&quot;:&quot;Name of the internal queue to post messages to&quot;},{&quot;name&quot;:&quot;Priority&quot;,&quot;value&quot;:&quot;4&quot;,&quot;description&quot;:&quot;The priority is an integer between 0 and 9 inclusive. The lowest priority is 0. The highest most expedited priority is 9.&quot;},{&quot;name&quot;:&quot;Put Timeout&quot;,&quot;value&quot;:&quot;3000&quot;,&quot;description&quot;:&quot;Time, in milliseconds, to wait for queue to become available when attempting to put a message on the queue.  You can enter 0 for an unlimited wait, but this is not recommended.  If no value is supplied, timeout will be set to 3000 milliseconds.&quot;}]},{&quot;name&quot;:&quot;Registers (Sent)&quot;,&quot;properties&quot;:[{&quot;name&quot;:&quot;Apply&quot;,&quot;value&quot;:&quot;true&quot;,&quot;description&quot;:&quot;User registers are processing variables and their values. If you want these registers to be emitted with the message set this to true.  In resubmit operations, usually this is set to false.&quot;},{&quot;name&quot;:&quot;Namespace&quot;,&quot;value&quot;:&quot;*&quot;,&quot;description&quot;:&quot;List of register namespaces that will be made available to the ordered queue.&quot;}]}]}" name="queueoutconfig" value="queue_error"/>
                <model:propertyitem description="Id of the className" name="classNameId"/>
                <model:propertyitem name="priority" value="4"/>
                <model:propertyitem name="puttimeout" value="3000"/>
                <model:propertyitem name="wantuser" value="true"/>
                <model:propertyitem name="replytoreqns" value="*"/>
                <model:propertyitem name="queue" value="ERROR"/>
              </model:group>
              <model:registers name="Pre-Execution">
                <model:propertyitem active="true" hidden="true" name="dbg.11.ex.st.time" scope="message" usage="user" value="_timer(nanoseconds)"/>
              </model:registers>
              <model:registers name="Post-Execution">
                <model:propertyitem active="true" hidden="true" name="dbg.11.ex.time" scope="message" usage="user" value="_isub(_timer(nanoseconds),_sreg(dbg.11.ex.st.time))"/>
              </model:registers>
            </model:properties>
          </model:user>
        </model:object>
        <model:object class="agent" classname="com.ibi.agents.XDDebugAgent" deactivate="false" defer="false" etap="false" id="debugger" key="6" name="Debug" type="FLOWCHART_STARTUP_DEBUG" useglobalobj="false" xdebughigh="10" xdebuglow="1">
          <model:user>
            <model:properties>
              <model:group name="Snapshot Settings">
                <model:propertyitem description="Trace identifier used to mark the current trace output." name="name" required="false" value="RCV"/>
                <model:propertyitem description="Decode the contents of the current base64 document before logging to disk." name="b64" required="false" value="false"/>
                <model:propertyitem description="If set, this is the starting offset within the data block to start the dump" name="startAt" required="false"/>
                <model:propertyitem description="If set, this is the total number of bytes to dump." name="maximum" required="false"/>
              </model:group>
              <model:group name="hidden">
                <model:propertyitem description="{&quot;name&quot;:&quot;Configuration (debug.1)&quot;,&quot;propertyGroups&quot;:[{&quot;name&quot;:&quot;Trace&quot;,&quot;properties&quot;:[{&quot;name&quot;:&quot;File Path&quot;,&quot;value&quot;:&quot;_sreg(iwayhome)processing/debug/*_trace.xml&quot;,&quot;description&quot;:&quot;The absolute file path to write a trace file. File patterns are supported.&quot;}]},{&quot;name&quot;:&quot;Payload&quot;,&quot;properties&quot;:[{&quot;name&quot;:&quot;File Path&quot;,&quot;value&quot;:&quot;_sreg(iwayhome)processing/debug/*_payload.xml&quot;,&quot;description&quot;:&quot;The absolute file path to write the payload. File patterns are supported.&quot;}]},{&quot;name&quot;:&quot;Trigger&quot;,&quot;properties&quot;:[{&quot;name&quot;:&quot;When&quot;,&quot;value&quot;:&quot;always&quot;,&quot;description&quot;:&quot;When to perform the trace operation&quot;}]}]}" name="debugconfig" value="debug.1"/>
                <model:propertyitem name="when" value="always"/>
                <model:propertyitem name="where" value="_sreg(iwayhome)processing/debug/*_trace.xml"/>
                <model:propertyitem name="physloc" value="_sreg(iwayhome)processing/debug/*_payload.xml"/>
              </model:group>
              <model:registers name="Pre-Execution">
                <model:propertyitem active="true" hidden="true" name="dbg.6.ex.st.time" scope="message" usage="user" value="_timer(nanoseconds)"/>
              </model:registers>
              <model:registers name="Post-Execution">
                <model:propertyitem active="true" hidden="true" name="dbg.6.ex.time" scope="message" usage="user" value="_isub(_timer(nanoseconds),_sreg(dbg.6.ex.st.time))"/>
              </model:registers>
            </model:properties>
          </model:user>
        </model:object>
      </model:objects>
      <model:relations startinstance="1">
        <model:relation completion="OnCompletion" frominstance="3" linedisplay="OnCompletion" lineid="FLOWCHART_DEFAULT_LINE" toinstance="2">
          <model:customevents>
            <model:event check="false" type="Stock" value="$success"/>
            <model:event check="false" type="Stock" value="$fail"/>
            <model:event check="false" type="Stock" value="$error"/>
            <model:event check="false" type="Custom" value="fail_parse"/>
            <model:event check="false" type="Custom" value="notfound"/>
            <model:event check="false" type="Custom" value="timeout"/>
            <model:event check="false" type="Custom" value="cancelled"/>
            <model:event check="false" type="Custom" value="fail_notfound"/>
            <model:event check="false" type="Custom" value="fail_operation"/>
          </model:customevents>
          <model:relationlabel/>
        </model:relation>
        <model:relation completion="OnCompletion" deactivate="false" frominstance="1" linedisplay="OnCompletion" lineid="FLOWCHART_DEFAULT_LINE" toinstance="5"/>
        <model:relation completion="OnCustom" deactivate="false" event="$success" frominstance="4" lineid="FLOWCHART_DEFAULT_LINE" toinstance="9">
          <model:customevents>
            <model:event check="true" type="Stock" value="$success"/>
            <model:event check="false" type="Stock" value="$fail"/>
            <model:event check="false" type="Stock" value="$error"/>
            <model:event check="false" type="Custom" value="fail_parse"/>
          </model:customevents>
        </model:relation>
        <model:relation completion="OnCustom" event="$fail,$error,fail_format,fail_transform" frominstance="9" linedisplay="OnCompletion" lineid="FLOWCHART_DEFAULT_LINE" toinstance="10">
          <model:customevents>
            <model:event check="false" type="Stock" value="$success"/>
            <model:event check="true" type="Stock" value="$fail"/>
            <model:event check="true" type="Stock" value="$error"/>
            <model:event check="true" type="Custom" value="fail_format"/>
            <model:event check="true" type="Custom" value="fail_transform"/>
          </model:customevents>
          <model:relationlabel label="Error"/>
          <lineColor blue="0" green="0" red="255"/>
        </model:relation>
        <model:relation completion="OnCompletion" frominstance="11" lineid="FLOWCHART_DEFAULT_LINE" toinstance="7"/>
        <model:relation completion="OnCustom" event="$error,error_retry" frominstance="5" linedisplay="OnCompletion" lineid="FLOWCHART_DEFAULT_LINE" toinstance="11">
          <model:customevents>
            <model:event check="true" type="Stock" value="$error"/>
            <model:event check="true" type="Custom" value="error_retry"/>
          </model:customevents>
          <model:relationlabel label="Failure"/>
          <lineColor blue="0" green="0" red="255"/>
        </model:relation>
        <model:relation completion="OnCustom" event="$success" frominstance="9" linedisplay="OnCompletion" lineid="FLOWCHART_DEFAULT_LINE" toinstance="3">
          <model:customevents>
            <model:event check="true" type="Stock" value="$success"/>
            <model:event check="false" type="Stock" value="$fail"/>
            <model:event check="false" type="Stock" value="$error"/>
            <model:event check="false" type="Custom" value="fail_format"/>
            <model:event check="false" type="Custom" value="fail_transform"/>
          </model:customevents>
          <model:relationlabel/>
        </model:relation>
        <model:relation completion="OnCompletion" deactivate="false" frominstance="5" linedisplay="OnCompletion" lineid="FLOWCHART_DEFAULT_LINE" toinstance="6"/>
        <model:relation completion="OnCompletion" frominstance="6" lineid="FLOWCHART_DEFAULT_LINE" toinstance="4"/>
      </model:relations>
    </model:processflow>
  </model:server>
  <model:globalvariables/>
</model:iway>